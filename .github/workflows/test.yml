name: Tests

on:
  pull_request:
  push:
    branches:
      - master
jobs:
  tests:
    name: Unit tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        envs: ["stable-tests", "experimental-tests"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v2
      - uses: technote-space/get-diff-action@v5
        id: git_diff
        with:
          PATTERNS: |
            **/**.go
            go.mod
            go.sum
      - name: run experimental test & create coverage
        run: |
            SUBMODULES=$(find . -type f -name 'go.mod' -print0 | xargs -0 -n1 dirname | sort)
            CURDIR=$(pwd)
            for m in ${SUBMODULES[@]}; do
                cd $CURDIR/$m
                PKGS=$(go list ./...)
                coverage_prefix=$(echo "$m" | sed -r 's/[xyz]+/_/g')
                for pkg in ${PKGS[@]}; do
                    go test -v -timeout 30m -race -coverpkg=all -coverprofile=profile.out -covermode=atomic -tags="ledger test_ledger_mock experimental" "$pkg"
                    if [ -f profile.out ]; then
                        tail -n +2 profile.out >> experimental/${{ coverage_prefix }}coverage.txt;
                        rm profile.out
                    fi
                done
            done

        if: env.GIT_DIFF && matrix.envs == 'experimental-tests'
      - name: run stable test & create coverage
        run: |
            SUBMODULES=$(find . -type f -name 'go.mod' -print0 | xargs -0 -n1 dirname | sort)
            CURDIR=$(pwd)
            for m in ${SUBMODULES[@]}; do
                cd $CURDIR/$m
                PKGS=$(go list ./...)
                coverage_prefix=$(echo "$m" | sed -r 's/[xyz]+/_/g')
                for pkg in ${PKGS[@]}; do
                    go test -v -timeout 30m -race -coverpkg=all -coverprofile=profile.out -covermode=atomic -tags="ledger test_ledger_mock" "$pkg"
                    if [ -f profile.out ]; then
                        tail -n +2 profile.out >> stable/${{ coverage_prefix }}coverage.txt;
                        rm profile.out
                    fi
                done
            done
        if: env.GIT_DIFF && matrix.envs == 'stable-tests'
      - uses: actions/upload-artifact@v2
        with:
          name: "experimental-coverage"
          path: ./experimental
          if: env.GIT_DIFF && matrix.envs == 'experimental-tests'
      - uses: actions/upload-artifact@v2
        with:
          name: "stable-coverage"
          path: ./stable
          if: env.GIT_DIFF && matrix.envs == 'stable-tests'
        
  code_cov:
    name: Cover report
    needs: tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        envs: ["stable-codecov", "experimental-codecov"]
    steps:
      - name: Install Go
        uses: actions/setup-go@v2.1.3
        with:
          go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v2
      - name: run experimental test cover
        if: matrix.envs == 'experimental-codecov'
        run: EXPERIMENTAL=true make test-cover
      - name: run stable test cover
        if: matrix.envs == 'stable-codecov'
        run: EXPERIMENTAL=false make test-cover
      - name: Upload codecov report
        uses: codecov/codecov-action@v1
        with:
          flags: ${{matrix.envs}}
          file: coverage.txt

